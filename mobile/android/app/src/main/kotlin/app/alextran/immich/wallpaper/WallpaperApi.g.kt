// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package app.alextran.immich.wallpaper

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object WallpaperApiPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class WallpaperPreferencesMessage (
  val enabled: Boolean,
  val personIds: List<String>,
  val rotationMinutes: Long,
  val rotationMode: String,
  val allowCellularData: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): WallpaperPreferencesMessage {
      val enabled = pigeonVar_list[0] as Boolean
      val personIds = pigeonVar_list[1] as List<String>
      val rotationMinutes = pigeonVar_list[2] as Long
      val rotationMode = pigeonVar_list[3] as String
      val allowCellularData = pigeonVar_list[4] as Boolean
      return WallpaperPreferencesMessage(enabled, personIds, rotationMinutes, rotationMode, allowCellularData)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      enabled,
      personIds,
      rotationMinutes,
      rotationMode,
      allowCellularData,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is WallpaperPreferencesMessage) {
      return false
    }
    if (this === other) {
      return true
    }
    return WallpaperApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WallpaperStatusMessage (
  val isSupported: Boolean,
  val isActive: Boolean,
  val lastError: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): WallpaperStatusMessage {
      val isSupported = pigeonVar_list[0] as Boolean
      val isActive = pigeonVar_list[1] as Boolean
      val lastError = pigeonVar_list[2] as String?
      return WallpaperStatusMessage(isSupported, isActive, lastError)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      isSupported,
      isActive,
      lastError,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is WallpaperStatusMessage) {
      return false
    }
    if (this === other) {
      return true
    }
    return WallpaperApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class WallpaperApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WallpaperPreferencesMessage.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WallpaperStatusMessage.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is WallpaperPreferencesMessage -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is WallpaperStatusMessage -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WallpaperHostApi {
  fun getStatus(): WallpaperStatusMessage
  fun setPreferences(preferences: WallpaperPreferencesMessage)
  fun requestRefresh()
  fun openSystemWallpaperPicker(): Boolean

  companion object {
    /** The codec used by WallpaperHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      WallpaperApiPigeonCodec()
    }
    /** Sets up an instance of `WallpaperHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: WallpaperHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.immich_mobile.WallpaperHostApi.getStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getStatus())
            } catch (exception: Throwable) {
              WallpaperApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.immich_mobile.WallpaperHostApi.setPreferences$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val preferencesArg = args[0] as WallpaperPreferencesMessage
            val wrapped: List<Any?> = try {
              api.setPreferences(preferencesArg)
              listOf(null)
            } catch (exception: Throwable) {
              WallpaperApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.immich_mobile.WallpaperHostApi.requestRefresh$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.requestRefresh()
              listOf(null)
            } catch (exception: Throwable) {
              WallpaperApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.immich_mobile.WallpaperHostApi.openSystemWallpaperPicker$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.openSystemWallpaperPicker())
            } catch (exception: Throwable) {
              WallpaperApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
