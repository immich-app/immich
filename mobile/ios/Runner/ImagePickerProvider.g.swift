// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class ImagePickerProviderPigeonCodecReader: FlutterStandardReader {
}

private class ImagePickerProviderPigeonCodecWriter: FlutterStandardWriter {
}

private class ImagePickerProviderPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ImagePickerProviderPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ImagePickerProviderPigeonCodecWriter(data: data)
  }
}

class ImagePickerProviderPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = ImagePickerProviderPigeonCodec(readerWriter: ImagePickerProviderPigeonCodecReaderWriter())
}

/// API for Android native to request an image from Flutter
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ImagePickerProviderApiProtocol {
  /// Called when Android needs an image for ACTION_GET_CONTENT/ACTION_PICK
  /// Returns the URI of the selected image (content:// or file:// URI)
  /// Returns null if user cancels
  func pickImageForIntent(completion: @escaping (Result<String?, PigeonError>) -> Void)
}
class ImagePickerProviderApi: ImagePickerProviderApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: ImagePickerProviderPigeonCodec {
    return ImagePickerProviderPigeonCodec.shared
  }
  /// Called when Android needs an image for ACTION_GET_CONTENT/ACTION_PICK
  /// Returns the URI of the selected image (content:// or file:// URI)
  /// Returns null if user cancels
  func pickImageForIntent(completion: @escaping (Result<String?, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.immich_mobile.ImagePickerProviderApi.pickImageForIntent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: String? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
}
