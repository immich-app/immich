# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.

  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true # Uncomment to enable the `prefer_single_quotes` rule
    use_build_context_synchronously: false
    require_trailing_commas: true
    unrelated_type_equality_checks: true
    prefer_const_constructors: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
analyzer:
  exclude:
    - openapi/**
    - build/**
    - lib/generated_plugin_registrant.dart
    - lib/**/*.g.dart
    - lib/**/*.drift.dart

  plugins:
    - custom_lint

custom_lint:
  debug: true
  rules:
    - avoid_build_context_in_providers: false
    - avoid_public_notifier_properties: false
    - avoid_manual_providers_as_generated_provider_dependency: false
    - unsupported_provider_value: false
    - import_rule_photo_manager:
      message: photo_manager must only be used in MediaRepositories
      restrict: package:photo_manager
      allowed:
        # required / wanted
        - 'lib/infrastructure/repositories/album_media.repository.dart'
        - 'lib/infrastructure/repositories/storage.repository.dart'
        - 'lib/repositories/{album,asset,file}_media.repository.dart'
        # acceptable exceptions for the time being
        - lib/entities/asset.entity.dart # to provide local AssetEntity for now
        - lib/providers/image/immich_local_{image,thumbnail}_provider.dart # accesses thumbnails via PhotoManager
        # refactor to make the providers and services testable
        - lib/providers/backup/{backup,manual_upload}.provider.dart # uses only PMProgressHandler
        - lib/services/{background,backup}.service.dart # uses only PMProgressHandler
        - test/**.dart
    - import_rule_isar:
      message: isar must only be used in entities and repositories
      restrict: package:isar
      allowed:
        # required / wanted
        - lib/entities/*.entity.dart
        - lib/repositories/{album,asset,backup,database,etag,exif_info,user,timeline,partner}.repository.dart
        - lib/infrastructure/entities/*.entity.dart
        - lib/infrastructure/repositories/*.repository.dart
        - lib/providers/infrastructure/db.provider.dart
        # acceptable exceptions for the time being (until Isar is fully replaced)
        - lib/providers/app_life_cycle.provider.dart
        - integration_test/test_utils/general_helper.dart
        - lib/main.dart
        - lib/pages/album/album_asset_selection.page.dart
        - lib/routing/router.dart
        - lib/services/immich_logger.service.dart # not really a service... more a util
        - lib/utils/{db,migration}.dart
        - lib/utils/bootstrap.dart
        - lib/widgets/asset_grid/asset_grid_data_structure.dart
        - test/**.dart
        # refactor the remaining providers
        - lib/providers/db.provider.dart

    - import_rule_openapi:
      message: openapi must only be used through ApiRepositories
      restrict: package:openapi
      allowed:
        # required / wanted
        - lib/repositories/*_api.repository.dart
        - lib/domain/models/sync_event.model.dart
        - lib/{domain,infrastructure}/**/sync_stream.*
        - lib/{domain,infrastructure}/**/sync_api.*
        - lib/infrastructure/repositories/*_api.repository.dart
        - lib/infrastructure/utils/*.converter.dart
        # acceptable exceptions for the time being
        - lib/entities/{album,asset,exif_info,user}.entity.dart # to convert DTOs to entities
        - lib/infrastructure/utils/*.converter.dart
        - lib/utils/{image_url_builder,openapi_patching}.dart # utils are fine
        - test/modules/utils/openapi_patching_test.dart # filename is self-explanatory...
        - lib/domain/services/sync_stream.service.dart # Making sure to comply with the type from database

        # refactor
        - lib/models/map/map_marker.model.dart
        - lib/models/server_info/server_{config,disk_info,features,version}.model.dart
        - lib/models/shared_link/shared_link.model.dart
        - lib/providers/asset_viewer/asset_people.provider.dart
        - lib/providers/auth.provider.dart
        - lib/providers/image/immich_remote_{image,thumbnail}_provider.dart
        - lib/providers/map/map_state.provider.dart
        - lib/providers/search/{search,search_filter}.provider.dart
        - lib/providers/websocket.provider.dart
        - lib/routing/auth_guard.dart
        - lib/services/{api,asset,backup,memory,oauth,search,shared_link,stack,trash}.service.dart
        - lib/widgets/album/album_thumbnail_listtile.dart
        - lib/widgets/forms/login/login_form.dart
        - lib/widgets/search/search_filter/{camera_picker,location_picker,people_picker}.dart
        - lib/services/auth.service.dart # on ApiException
        - test/services/auth.service_test.dart # on ApiException
        # allow import from test
        - test/**.dart

dart_code_metrics:
  rules:
    # All rules from "recommended" preset
    # Show potential errors
  #  - avoid-cascade-after-if-null
  #  - avoid-collection-methods-with-unrelated-types
  #  - avoid-duplicate-exports
  #  - avoid-dynamic
  #  - avoid-missing-enum-constant-in-map
  #  - avoid-passing-async-when-sync-expected
  #  - avoid-throw-in-catch-block
    - avoid-unused-parameters
  #  - avoid-unnecessary-type-assertions
  #  - avoid-unnecessary-type-casts
  #  - avoid-unrelated-type-assertions
  #  - avoid-unrelated-type-casts
  #  - no-empty-block
  #  - no-equal-then-else
  #  - prefer-correct-test-file-name
  #  - prefer-match-file-name
  #  - prefer-return-await
  #  - avoid-self-assignment
  #  - avoid-self-compare
  #  - avoid-shadowing
  #  - prefer-iterable-of
  #  - no-equal-switch-case
  #  - no-equal-conditions
  #  - avoid-equal-expressions
  #  - avoid-missed-calls
  #  - avoid-unnecessary-negations
  #  - avoid-unused-generics
  #  - function-always-returns-null
  #  - avoid-throw-objects-without-tostring
  #  - avoid-unsafe-collection-methods
  #  - prefer-wildcard-pattern
  #  - no-equal-switch-expression-cases
  #  - avoid-future-tostring
  #  - avoid-unassigned-late-fields
  #  - avoid-nested-futures
  #  - avoid-generics-shadowing
  #  - prefer-parentheses-with-if-null
  #  - no-equal-nested-conditions
  #  - avoid-shadowed-extension-methods
  #  - avoid-unnecessary-conditionals
  #  - avoid-double-slash-imports
  #  - avoid-map-keys-contains
  #  - prefer-correct-json-casts
  #  - avoid-duplicate-mixins
  #  - avoid-nullable-interpolation
  #  - avoid-unused-instances
  #  - prefer-correct-for-loop-increment
  #  - prefer-public-exception-classes
  #  - avoid-uncaught-future-errors
  #  - always-remove-listener
  #  - avoid-unnecessary-setstate
  #  - check-for-equals-in-render-object-setters
  #  - consistent-update-render-object
  #  - use-setstate-synchronously
  #  - avoid-incomplete-copy-with
  #  - proper-super-calls
  #  - dispose-fields
  #  - avoid-empty-setstate
  #  - avoid-state-constructors
  #  - avoid-recursive-widget-calls
  #  - avoid-missing-image-alt
  #  - avoid-passing-self-as-argument
  #  - avoid-unnecessary-if
  #  - avoid-unconditional-break
  #  - avoid-referencing-discarded-variables
  #  - avoid-unnecessary-local-late
  #  - avoid-wildcard-cases-with-enums
  #  - match-getter-setter-field-names
  #  - avoid-accessing-collections-by-constant-index
  #  - prefer-unique-test-names
  #  - avoid-duplicate-cascades
  #  - prefer-specific-cases-first
  #  - avoid-duplicate-switch-case-conditions
  #  - prefer-explicit-function-type
  #  - avoid-misused-test-matchers
  #  - avoid-duplicate-test-assertions
  #  - prefer-switch-with-enums
  #  - prefer-any-or-every
  #  - avoid-duplicate-map-keys
  #  - avoid-nullable-tostring
  #  - avoid-undisposed-instances
  #  - avoid-duplicate-initializers
  #  - avoid-unassigned-stream-subscriptions
  #  - avoid-empty-test-groups
  #  - avoid-not-encodable-in-to-json
  #  - avoid-contradictory-expressions
  #  - avoid-excessive-expressions
  #  - prefer-private-extension-type-field
  #  - avoid-renaming-representation-getters
  #  - avoid-empty-spread
  #  - avoid-unnecessary-gesture-detector
  #  - avoid-missing-completer-stack-trace
  #  - avoid-casting-to-extension-type
  #  - prefer-overriding-parent-equality
  #  - avoid-missing-controller
  #  - avoid-unknown-pragma
  #  - avoid-conditions-with-boolean-literals
  #  - avoid-multi-assignment
  #  - avoid-collection-equality-checks
  #  - avoid-only-rethrow
  #  - avoid-incorrect-image-opacity
  #  - avoid-misused-set-literals
  #  - dispose-class-fields
  #  - avoid-suspicious-super-overrides
  #  - avoid-assignments-as-conditions
  #  - avoid-unused-assignment
  #  - avoid-unnecessary-overrides
  #  - avoid-implicitly-nullable-extension-types
    # Enable with the next release
    # - avoid-late-final-reassignment
    # - avoid-duplicate-constant-values
    # - function-always-returns-same-value
    # - avoid-flexible-outside-flex
    # - avoid-unnecessary-patterns
    # - use-closest-build-context
    # - avoid-commented-out-code
    # - avoid-recursive-tostring
    # - avoid-enum-values-by-index
    # - avoid-constant-assert-conditions
    # - avoid-inconsistent-digit-separators
    # - pass-existing-future-to-future-builder
    # - pass-existing-stream-to-stream-builder

    # Code simplification
  #  - avoid-redundant-async
  #  - avoid-redundant-else
  #  - avoid-unnecessary-nullable-return-type
  #  - avoid-redundant-pragma-inline
  #  - avoid-nested-records
  #  - avoid-redundant-positional-field-name
  #  - avoid-explicit-pattern-field-name
  #  - prefer-simpler-patterns-null-check
  #  - avoid-unnecessary-return
  #  - avoid-duplicate-patterns
  #  - avoid-keywords-in-wildcard-pattern
  #  - avoid-unnecessary-futures
  #  - avoid-unnecessary-reassignment
  #  - avoid-unnecessary-call
  #  - avoid-unnecessary-stateful-widgets
  #  - prefer-dedicated-media-query-methods
  #  - avoid-unnecessary-overrides-in-state
  #  - move-variable-closer-to-its-usage
  #  - avoid-nullable-parameters-with-default-values
  #  - prefer-null-aware-spread
  #  - avoid-inferrable-type-arguments
  #  - avoid-unnecessary-super
  #  - avoid-unnecessary-collections
  #  - avoid-unnecessary-extends
  #  - avoid-unnecessary-enum-arguments
  #  - prefer-contains
    # Enable with the next release
    # - prefer-simpler-boolean-expressions
    # - prefer-spacing
    # - avoid-unnecessary-continue
    # - avoid-unnecessary-compare-to

    # Style
  #  - prefer-trailing-comma
  #  - unnecessary-trailing-comma
  #  - prefer-declaring-const-constructor
  #  - prefer-single-widget-per-file
  #  - prefer-prefixed-global-constants
  #  - prefer-correct-callback-field-name
