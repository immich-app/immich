-- NOTE: This file is auto generated by ./sql-generator

-- UserRepository.get
select
  "id",
  "email",
  "createdAt",
  "profileImagePath",
  "isAdmin",
  "shouldChangePassword",
  "deletedAt",
  "oauthId",
  "updatedAt",
  "storageLabel",
  "name",
  "quotaSizeInBytes",
  "quotaUsageInBytes",
  "status",
  "profileChangedAt",
  (
    select
      (
        select
          coalesce(json_agg(agg), '[]')
        from
          "user_metadata" as agg
      ) as "metadata"
    from
      "user_metadata"
    where
      "users"."id" = "user_metadata"."userId"
  ) as "metadata"
from
  "users"
where
  "users"."id" = $1
  and "users"."deletedAt" is null

-- UserRepository.getAdmin
select
  "id",
  "email",
  "createdAt",
  "profileImagePath",
  "isAdmin",
  "shouldChangePassword",
  "deletedAt",
  "oauthId",
  "updatedAt",
  "storageLabel",
  "name",
  "quotaSizeInBytes",
  "quotaUsageInBytes",
  "status",
  "profileChangedAt"
from
  "users"
where
  "isAdmin" = $1

-- UserRepository.hasAdmin
select
  "id"
from
  "users"
where
  "isAdmin" = $1

-- UserRepository.getByEmail
select
  "id",
  "email",
  "createdAt",
  "profileImagePath",
  "isAdmin",
  "shouldChangePassword",
  "deletedAt",
  "oauthId",
  "updatedAt",
  "storageLabel",
  "name",
  "quotaSizeInBytes",
  "quotaUsageInBytes",
  "status",
  "profileChangedAt"
from
  "users"
where
  "email" = $1

-- UserRepository.getByStorageLabel
select
  "id",
  "email",
  "createdAt",
  "profileImagePath",
  "isAdmin",
  "shouldChangePassword",
  "deletedAt",
  "oauthId",
  "updatedAt",
  "storageLabel",
  "name",
  "quotaSizeInBytes",
  "quotaUsageInBytes",
  "status",
  "profileChangedAt"
from
  "users"
where
  "storageLabel" = $1

-- UserRepository.getByOAuthId
select
  "id",
  "email",
  "createdAt",
  "profileImagePath",
  "isAdmin",
  "shouldChangePassword",
  "deletedAt",
  "oauthId",
  "updatedAt",
  "storageLabel",
  "name",
  "quotaSizeInBytes",
  "quotaUsageInBytes",
  "status",
  "profileChangedAt"
from
  "users"
where
  "oauthId" = $1

-- UserRepository.getUserStats
SELECT
  "users"."id" AS "userId",
  "users"."name" AS "userName",
  "users"."quotaSizeInBytes" AS "quotaSizeInBytes",
  COUNT("assets"."id") FILTER (
    WHERE
      "assets"."type" = 'IMAGE'
      AND "assets"."isVisible"
  ) AS "photos",
  COUNT("assets"."id") FILTER (
    WHERE
      "assets"."type" = 'VIDEO'
      AND "assets"."isVisible"
  ) AS "videos",
  COALESCE(
    SUM("exif"."fileSizeInByte") FILTER (
      WHERE
        "assets"."libraryId" IS NULL
    ),
    0
  ) AS "usage",
  COALESCE(
    SUM("exif"."fileSizeInByte") FILTER (
      WHERE
        "assets"."libraryId" IS NULL
        AND "assets"."type" = 'IMAGE'
    ),
    0
  ) AS "usagePhotos",
  COALESCE(
    SUM("exif"."fileSizeInByte") FILTER (
      WHERE
        "assets"."libraryId" IS NULL
        AND "assets"."type" = 'VIDEO'
    ),
    0
  ) AS "usageVideos"
FROM
  "users" "users"
  LEFT JOIN "assets" "assets" ON "assets"."ownerId" = "users"."id"
  AND ("assets"."deletedAt" IS NULL)
  LEFT JOIN "exif" "exif" ON "exif"."assetId" = "assets"."id"
WHERE
  "users"."deletedAt" IS NULL
GROUP BY
  "users"."id"
ORDER BY
  "users"."createdAt" ASC

-- UserRepository.updateUsage
update "users"
set
  "quotaUsageInBytes" = "quotaUsageInBytes" + $1,
  "updatedAt" = $2
where
  "id" = $3::uuid

-- UserRepository.syncUsage
UPDATE "users"
SET
  "quotaUsageInBytes" = (
    SELECT
      COALESCE(SUM(exif."fileSizeInByte"), 0)
    FROM
      "assets" "assets"
      LEFT JOIN "exif" "exif" ON "exif"."assetId" = "assets"."id"
    WHERE
      "assets"."ownerId" = users.id
      AND "assets"."libraryId" IS NULL
  ),
  "updatedAt" = CURRENT_TIMESTAMP
WHERE
  users.id = $1
update "users"
set
  "quotaUsageInBytes" = (
    select
      coalesce(sum("exif"."fileSizeInByte"), 0) as "usage"
    from
      "assets"
      left join "exif" on "exif"."assetId" = "assets"."id"
    where
      (
        "assets"."libraryId" is null
        and "assets"."ownerId" = "users"."id"
      )
  ),
  "updatedAt" = $1
where
  "users"."id" = $2::uuid
